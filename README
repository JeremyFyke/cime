GPT is a general-purpose timing library.  By itself it can gather wallclock
and cpu timing statistics for a code instrumented with an aribtrary sequence
of calls to the pair of routines "GPTstart" and "GPTstop" (more details
below).  It is thread-safe, presuming either OpenMP or pthreads is available.

GPT also provides hooks into the hardware counters library PAPI.  If this
option is enabled (./configure --enable-papi), the same "GPTstart" and
"GPTstop" calls can be used to provide various low-level hardware counter
info, such as total cycles, floating point ops, cache misses, and various
other performance information depending on the target architecture.  PAPI
must already be installed in order to enable this option.


Building GPT
-------- ---

The simplest procedure for building GPT is:

./configure
make
make install

Some important options to configure are:

--enable-papi      Enables support for the PAPI low-level counters library.
--with-papi=<path> Specify path to root of PAPI installation (only useful if
                   --enable-papi also specified)
--enable-openmp    Enables OpenMP threading support.  This means the
                   same timer can be called from multiple threads.
--enable-pthreads  Enables pthreads threading support.  OpenMP is preferable
                   if available, because the pthreads option utilizes an 
                   arbitrary (but changeable) upper limit on the number of
                   available threads.  --enable-openmp overrides
                   --enable-pthreads if both are specified.
--enable-bit64     build 64-bit version of library.  For now this only has an
                   effect on AIX and IRIX.
--enable-debug     Turn on -g and turn off optimization compiler flags.
--enable-opt       Turn on compiler optimization (recommended).
--prefix=<dir>     For installing GPT in a non-standard place.

configure also accepts CC= and F77= command line options to specify C and
Fortran compilers, respectively.

Don't hesitate to edit the Makefile that configure produces if you like.  It
is quite straightforward.


Using GPT
----- ---

Code instrumentation to utilize GPT involves an arbitrary number of calls to
GPTsetoption(), then a single call to GPTinitialize(), then an arbitrary
sequence of calls to GPTstart() and GPTstop(), and finally a call to GPTpr().
See the man pages for details of arguments to these functions.  The man pages
for GPTstart and GPTstop give an example complete sequence of GPT calls to
instrument a code.  Also, various test codes are built in the tests/
subdirectory of this distribution.

The purpose of GPTsetoption is to enable or disable certain types of timing.
The default is to only gather wallclock timing stats.  If this is the
desired bahavior then no calls to GPTsetoption are required.  If for example,
the PAPI counter for total cycles is also desired, then a call of the form:

GPTsetoption (PAPI_TOT_CYC, 1)

is required.  The list of available GPT options is contained in gpt.h, and
the list of possible PAPI options is contained in the file papiStdEventDefs.h 
included with the PAPI distribution.

GPTinitialize () initializes the GPT library for subsequent calls to GPTstart
and GPTstop.  This is necessary for threading, and to initialize the PAPI
library in case support for it was enabled at configure time.

There can be an arbitrary number of start/stop pairs before GPTpr is called
to print the results.  And an arbitrary amount of nesting of timers is also
allowed.  The printed results will be indented to indicate the level of
nesting.

GPTpr prints the results to a file named timing.<number>, where <number> is
an input argument to GPTpr.

GPTfinalize can be called to clean up the GPT environment.  All space
malloc'ed by the GPT library will be freed by this call.
