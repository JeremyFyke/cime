# Where to install GPTL library and include files
INSTALLDIR = /usr/local

# Where to install man pages (if blank, defaults to $INSTALLDIR)
MANDIR = 

# C compiler
CC = gcc

# Whether to build debug lib or optimized lib, and associated flags
DEBUG = no
ifeq ($(DEBUG),yes)
  CFLAGS = -g -O0 -Wall -fno-inline
else
  CFLAGS = -g -O3 -finline-functions -Winline -Wall
endif

# Set ABI flags for non-default ABIs (e.g. 64-bit addressing)
ABIFLAGS =

# Linux system or not? Used by get_memusage
LINUX = yes

# To enable OpenMP threading, set OPENMP=yes and define the compiler flag. Otherwise,
# set OPENMP=no. OpenMP applications linked with GPTL as built with OPENMP=no will NOT
# be thread-safe. If not doing OpenMP, check for PTHREADS
OPENMP = yes
ifeq ($(OPENMP),yes)
  COMPFLAG = -fopenmp
else
# Set PTHREADS if available
  PTHREADS = no
endif

# For gcc, -Dinline=inline is a no-op. For other C compilers, things like 
# -Dinline=__inline__ may be required. To find your compiler's definition, try 
# running "./suggestions CC=<your_C_compiler>".
INLINEFLAG = -Dinline=inline

# To get some C compilers such as gcc to behave properly with -O0 and no inlining, 
# need to effectively delete the "inline" keyword
ifeq ($(DEBUG),yes)
  INLINEFLAG = -Dinline=
endif

# To build the Fortran interface, set FORTRAN=yes and define the entries under
# ifeq ($(FORTRAN),yes). Otherwise, set FORTRAN=no and skip this section.
FORTRAN = yes
ifeq ($(FORTRAN),yes)
# Fortran name mangling: possibilities are: leave UNDERSCORING blank meaning none
# (e.g. xlf90), -DFORTRANDOUBLEUNDERSCORE (e.g. g77), and -DFORTRANUNDERSCORE 
# (e.g. gfortran, pathf95)
#
#  UNDERSCORING =
#  UNDERSCORING = -DFORTRANDOUBLEUNDERSCORE
  UNDERSCORING = -DFORTRANUNDERSCORE

# Set Fortran compiler, flags, and (if OpenMP enabled) OpenMP compiler flag.
# These settings are only used for the Fortran test applications.
  FC     = gfortran
  FFLAGS = -g -O2
  ifeq ($(OPENMP),yes)
    FOMPFLAG = -fopenmp
  endif
endif

# Archiver: normally it's just ar
AR = ar

# PAPI: To enable, set HAVE_PAPI=yes. Then set inc and lib info if needed.
# Modify FFLAGS for ftests/: Normally it's -D, but AIX requires -WF,-D
HAVE_PAPI = yes
ifeq ($(HAVE_PAPI),yes)
  PAPI_INCFLAGS = -I/usr/local/include
  PAPI_LIBFLAGS = -L/usr/local/lib -lpapi
  ifeq ($(FORTRAN),yes)
    FFLAGS += -DHAVE_PAPI
  endif
endif

# MPI: Set HAVE_MPI=yes only if you intend to use MPI_Wtime as the underlying wallclock
# timer. Then set inc and lib info if needed (e.g. if CC=mpicc, MPI_INCFLAGS and
# MPI_LIBFLAGS can be blank).
# Modify FFLAGS for ftests/: Normally it's -D, but AIX requires -WF,-D
HAVE_MPI = no
ifeq ($(HAVE_MPI),yes)
  MPI_INCFLAGS = -I/usr/local/include
  MPI_LIBFLAGS = -L/usr/local/lib -lmpich
  MPICMD = mpirun
  ifeq ($(FORTRAN),yes)
    FFLAGS += -DHAVE_MPI
  endif
endif

# clock_gettime() in librt.a is an option for gathering wallclock time stats
# on some machines. Setting HAVE_LIBRT=yes enables this, but will probably
# require linking with -lrt 
HAVE_LIBRT = no

# Only define HAVE_NANOTIME if this is a x86
# If HAVE_NANOTIME=yes, set BIT64=yes if this is an x86_64
HAVE_NANOTIME = yes
ifeq ($(HAVE_NANOTIME),yes)
  BIT64 = no
endif

# Some old compilers don't support vprintf. Set to "no" in this case
HAVE_VPRINTF = yes

# Some old compilers don't support the C times() function. Set to "no" in this case
HAVE_TIMES = yes

# gettimeofday() should be available everywhere. But if not, set to "no"
HAVE_GETTIMEOFDAY = yes
