.\" $Id: GPTLprocess_namelist.3,v 1.2 2009-01-04 00:18:40 rosinski Exp $
.TH GPTLprocess_namelist 3 "December, 2008" "GPTL"

.SH NAME
GPTLprocess_namelist \- Parse an input Fortran namelist and call
GPTLsetoption/GPTLsetutr appropriately.

.SH SYNOPSIS
.B Fortran Interface:
.nf
subroutine gptlprocess_namelist (character(len=*) filename, integer unitno, integer ret)
.fi

.SH DESCRIPTION
.B GPTLprocess_namelist
is a utility subroutine provided for convenience to Fortran applications. It
allows the specification of input to
.B GPTLsetoption
and
.B GPTLsetutr
via namelist input. This avoids the necessity of recompiling and relinking
when changing
.B GPTL
options. The routine is provided as a subroutine rather than a function to
get around problems encountered when 'include ./gptl.inc' declares the
function to be external.

.SH ARGUMENTS
.TP
.I filename
-- file name containing the namelist (namelist group gptlpr).

.TP
.I unitno
-- Fortran unit number to use when opening the namelist.

.TP
.I ret
-- output return code

.SH RESTRICTIONS
.B GPTLinitialize()
must 
.B NOT
have been called. Generally the user invokes
.B GPTLinitialize()
right after calling this function.

.SH RETURN VALUES
On success, this subroutine returns 0 in output argument
.B ret .
On error, 
.B ret
is negative and a descriptive message
printed. As long as the namelist file can be opened and read, 
.B ret 
is set to 0. This is true even if some of the individual settings fail (e.g. if
a requested PAPI event is not available).

.SH EXAMPLES
An example namelist (
.B gptlnl
) is provided in the ftests/ subdirectory of the GPTL distribution. When
gptlprocess_namelist is called, it parses the namelist (namelist group name
&gptlnl) and calls appropriate GPTL functions.
.nf         
.if t .ft CW

(void) GPTLsetoption (GPTLcpu, 1);      /* enable cpu timings */
(void) GPTLsetoption (GPTLwall, 0);     /* disable wallclock timings */
(void) GPTLsetoption (PAPI_TOT_CYC, 1); /* enable counting of total cycles */
...
(void) GPTLinitialize();                /* initialize the GPTL library */
(void) GPTLstart ("total");             /* start a timer */
...
(void) GPTLstart ("do_work");           /* start another timer */

do_work();                              /* do some work */

(void) GPTLstop ("do_work");            /* stop a timer */
(void) GPTLstop ("total");              /* stop a timer */
...
(void) GPTLpr (mympitaskid);            /* print the results to timing.<mympitaskid> */

.if t .ft P
.fi

.SH SEE ALSO
.BR GPTLsetoption "(3)" 
.BR GPTLsetutr "(3)" 
