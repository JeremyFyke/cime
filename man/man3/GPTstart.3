.\" $Id: GPTstart.3,v 1.1 2004-11-10 04:41:21 rosinski Exp $
.TH GPTstart 3 "November, 2004" "GPT"

.SH NAME
GPTstart \- Start a timer

.SH SYNOPSIS
.B C Interface:

.BI "int\ GPTstart (const char *name);"

.fi
.B Fortran Interface:

.BI "integer gptstart (character*(*) name)"
.fi

.SH DESCRIPTION
.B GPTstart
starts a timer defined by
.B name.
Only the first 15 characters of
.B name
are significant, but this limit can be modified in the GPT library code via the 
.B #define 
of MAX_CHARS.  Longer names are truncated.  All
statistics set by earlier calls to GPTsetoption (e.g. cpu time), or otherwise
on by default (e.g. wallclock time), are counted.

.SH RETURN VALUES
On success, this function returns
.B 0.
On error, a non-zero error code is returned and a descriptive message
printed. 

.SH EXAMPLES
A complete sequence of GPT library calls within a program should look
something like the following:
.nf         
.if t .ft CW

if (GPTsetoption (GPTcpu, 1) < 0)   /* enable cpu timings */
  handle_error()
if (GPTsetoption (GPTwall, 0) < 0)  /* disable wallclock timings */
  handle_error()
if (GPTsetoption (PAPI_TOT_CYC, 1)  /* enable counting of total cycles */
  handle_error()
...
if (GPTinitialize() < 0)         /* prepare for start/stop sequences */
  handle_error()
if (GPTstart ("total") < 0)      /* start a timer */
  handle_error()
...
if (GPTstart ("do_work") < 0)    /* start another timer */
  handle_error()

do_work();

if (GPTstop ("do_work") < 0)     /* stop a timer */
  handle_error()
if (GPTstop ("total") < 0)       /* stop a timer */
  handle_error()
...
if (GPTpr (mympitaskid) < 0)     /* print the results to timing.<mympitaskid> */
  handle_error()


.if t .ft P
.fi

.SH SEE ALSO
.BR GPTstop "(3), " 
.BR GPTpr "(3)" 
