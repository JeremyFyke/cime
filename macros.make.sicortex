# Where to install GPTL library, include files, and man pages
INSTALLDIR = $(HOME)/mips

# C compiler
CC     = pathcc

# Whether to build debug lib or optimized lib, and associated flags
DEBUG = no
ifeq ($(DEBUG),yes)
  CFLAGS = -g -O0 -Wall -fno-inline
else
  CFLAGS = -g -O3 -finline-functions -Winline -Wall
endif

# Set ABI flags for non-default ABIs (e.g. 64-bit addressing)
ABIFLAGS =

# Linux system or not? Used by get_memusage
LINUX = yes

# To enable OpenMP threading, set OPENMP=yes and define the compiler flag. Otherwise,
# set OPENMP=no. OpenMP applications linked with GPTL as built with OPENMP=no will NOT
# be thread-safe
OPENMP = yes
ifeq ($(OPENMP),yes)
  COMPFLAG = -mp
else
# Check for PTHREADS
  ifeq ($(PTHREADS),yes)
    CFLAGS  += -DTHREADED_PTHREADS
    LDFLAGS += -lpthread
  endif
endif

# For gcc, -Dinline=inline is a no-op. For other C compilers, things like 
# -Dinline=__inline__ may be required. Autoconf test AC_C_INLINE can find the 
# right definition. If unsure, try running "./suggestions CC=<your_C_compiler>"
INLINEFLAG  = -Dinline=inline

# To build the Fortran interface, set FORTRAN=yes and define the entries under
# ifeq ($(FORTRAN),yes). Otherwise, set FORTRAN=no and skip this section.
FORTRAN = yes
ifeq ($(FORTRAN),yes)
# Fortran name mangling: possibilities are: leave UNDERSCORING blank meaning none
# (e.g. xlf90), -DFORTRANDOUBLEUNDERSCORE (e.g. g77), and -DFORTRANUNDERSCORE 
# (e.g. gfortran, pathf95)
#
#  UNDERSCORING =
  UNDERSCORING = -DFORTRANUNDERSCORE
  UNDERSCORING = -DFORTRANDOUBLEUNDERSCORE

# Set Fortran compiler, flags, and (if OpenMP enabled) OpenMP compiler flag
# These settings are only used for the Fortran test applications.
  FC     = pathf95
  FFLAGS = -g -O2
  ifeq ($(OPENMP),yes)
    FOMPFLAG = -mp
  endif
endif

# Archiver: normally it's just ar
AR = ar

# PAPI: To enable, set HAVE_PAPI=yes. Then set inc and lib info if needed.
# PAPI_LIBNAME: Test applications will be linked with -l$(PAPI_LIBNAME)
HAVE_PAPI = yes
ifeq ($(HAVE_PAPI),yes)
  PAPI_INCDIR  = 
  PAPI_LIBDIR  = 
  PAPI_LIBNAME = papi
endif

# MPI: To enable, set HAVE_MPI=yes. Then set inc and lib info if needed.
# If CC=mpicc for example, MPI_INCDIR MPI_LIBDIR and MPI_LIBNAME can all be blank.
# If MPI_LIBNAME is set, test applications will be linked with -l$(MPI_LIBNAME)
HAVE_MPI    = yes
ifeq ($(HAVE_MPI),yes)
  MPI_INCDIR  = 
  MPI_LIBDIR  = 
  MPI_LIBNAME = scmpi
endif

# librt.a is an option for gathering wallclock time stats on some machines. Setting
# HAVE_LIBRT=yes enables this, but will probably require linking with -lrt
HAVE_LIBRT = yes

# Only define HAVE_NANOTIME if this is a x86
# If HAVE_NANOTIME=yes, set BIT64=yes if this is an x86_64
HAVE_NANOTIME = no
ifeq ($(HAVE_NANOTIME),yes)
  BIT64 = no
endif

# Some old compilers don't support vprintf. Set to "no" in this case
HAVE_VPRINTF = yes

# Some old compilers don't support the C times() function. Set to "no" in this case
HAVE_TIMES = yes

# gettimeofday() should be available everywhere. But if not, set to "no"
HAVE_GETTIMEOFDAY = yes
